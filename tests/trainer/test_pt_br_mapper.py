import unittest
from app.trainer.pt_br_mapper import UNICODE_ACCENTED_LETTERS
from app.trainer.pt_br_mapper import DOUBLE_LETTERS
from app.trainer.pt_br_mapper import SPECIAL_CHARACTERS
from app.trainer.pt_br_mapper import SIMILAR_WORDS
from app.trainer.pt_br_mapper import SOLITARY_LETTERS

class Mapper(unittest.TestCase):

    def test_key_in_unicode_accented_letters(self):
        keys = UNICODE_ACCENTED_LETTERS.keys()

        self.assertIn('\u00e0', keys)
        self.assertIn('\u00e1', keys)
        self.assertIn('\u00e2', keys)
        self.assertIn('\u00e3', keys)
        self.assertIn('\u00e4', keys)
        self.assertIn('\u00c0', keys)
        self.assertIn('\u00c1', keys)
        self.assertIn('\u00c2', keys)
        self.assertIn('\u00c3', keys)
        self.assertIn('\u00c4', keys)
        self.assertIn('\u00c5', keys)
        self.assertIn('\u00e7', keys)
        self.assertIn('\u00c7', keys)
        self.assertIn('\u00e8', keys)
        self.assertIn('\u00e9', keys)
        self.assertIn('\u00ea', keys)
        self.assertIn('\u00eb', keys)
        self.assertIn('\u00c8', keys)
        self.assertIn('\u00c9', keys)
        self.assertIn('\u00ca', keys)
        self.assertIn('\u00cb', keys)
        self.assertIn('\u00ec', keys)
        self.assertIn('\u00ed', keys)
        self.assertIn('\u00ee', keys)
        self.assertIn('\u00ef', keys)
        self.assertIn('\u00cd', keys)
        self.assertIn('\u00cc', keys)
        self.assertIn('\u00ce', keys)
        self.assertIn('\u00cf', keys)
        self.assertIn('\u00f2', keys)
        self.assertIn('\u00f3', keys)
        self.assertIn('\u00f4', keys)
        self.assertIn('\u00f5', keys)
        self.assertIn('\u00f6', keys)
        self.assertIn('\u00d2', keys)
        self.assertIn('\u00d3', keys)
        self.assertIn('\u00d4', keys)
        self.assertIn('\u00d5', keys)
        self.assertIn('\u00d6', keys)
        self.assertIn('\u00f1', keys)
        self.assertIn('\u00d1', keys)
        self.assertIn('\u00f9', keys)
        self.assertIn('\u00fa', keys)
        self.assertIn('\u00fb', keys)
        self.assertIn('\u00fc', keys)
        self.assertIn('\u00d9', keys)
        self.assertIn('\u00da', keys)
        self.assertIn('\u00db', keys)
        self.assertIn('\u00dc', keys)

    def test_value_of_key_from_unicode_accented_letters(self):
        code = UNICODE_ACCENTED_LETTERS

        self.assertEqual(code['\u00e0'], 'a')
        self.assertEqual(code['\u00e1'], 'a')
        self.assertEqual(code['\u00e2'], 'a')
        self.assertEqual(code['\u00e3'], 'a')
        self.assertEqual(code['\u00e4'], 'a')
        self.assertEqual(code['\u00c0'], 'a')
        self.assertEqual(code['\u00c1'], 'a')
        self.assertEqual(code['\u00c2'], 'a')
        self.assertEqual(code['\u00c3'], 'a')
        self.assertEqual(code['\u00c4'], 'a')
        self.assertEqual(code['\u00c5'], 'a')
        self.assertEqual(code['\u00e7'], 'c')
        self.assertEqual(code['\u00c7'], 'c')
        self.assertEqual(code['\u00e8'], 'e')
        self.assertEqual(code['\u00e9'], 'e')
        self.assertEqual(code['\u00ea'], 'e')
        self.assertEqual(code['\u00eb'], 'e')
        self.assertEqual(code['\u00c8'], 'e')
        self.assertEqual(code['\u00c9'], 'e')
        self.assertEqual(code['\u00ca'], 'e')
        self.assertEqual(code['\u00cb'], 'e')
        self.assertEqual(code['\u00ec'], 'i')
        self.assertEqual(code['\u00ed'], 'i')
        self.assertEqual(code['\u00ee'], 'i')
        self.assertEqual(code['\u00ef'], 'i')
        self.assertEqual(code['\u00cd'], 'i')
        self.assertEqual(code['\u00cc'], 'i')
        self.assertEqual(code['\u00ce'], 'i')
        self.assertEqual(code['\u00cf'], 'i')
        self.assertEqual(code['\u00f2'], 'o')
        self.assertEqual(code['\u00f3'], 'o')
        self.assertEqual(code['\u00f4'], 'o')
        self.assertEqual(code['\u00f5'], 'o')
        self.assertEqual(code['\u00f6'], 'o')
        self.assertEqual(code['\u00d2'], 'o')
        self.assertEqual(code['\u00d3'], 'o')
        self.assertEqual(code['\u00d4'], 'o')
        self.assertEqual(code['\u00d5'], 'o')
        self.assertEqual(code['\u00d6'], 'o')
        self.assertEqual(code['\u00f1'], 'n')
        self.assertEqual(code['\u00d1'], 'n')
        self.assertEqual(code['\u00f9'], 'u')
        self.assertEqual(code['\u00fa'], 'u')
        self.assertEqual(code['\u00fb'], 'u')
        self.assertEqual(code['\u00fc'], 'u')
        self.assertEqual(code['\u00d9'], 'u')
        self.assertEqual(code['\u00da'], 'u')
        self.assertEqual(code['\u00db'], 'u')
        self.assertEqual(code['\u00dc'], 'u')

    def test_key_in_double_letters(self):
        keys = DOUBLE_LETTERS.keys()

        self.assertIn('aa', keys)
        self.assertIn('ee', keys)
        self.assertIn('ii', keys)
        self.assertIn('ooo', keys)
        self.assertIn('uu', keys)
        self.assertIn('ddd', keys)
        self.assertIn('ff', keys)
        self.assertIn('hh', keys)
        self.assertIn('zz', keys)
        self.assertIn('rsrs', keys)
        self.assertIn('rsr', keys)
        self.assertIn('ll', keys)
        self.assertIn('mm', keys)
        self.assertIn('nn', keys)
        self.assertIn('rrr', keys)
        self.assertIn('sss', keys)
        self.assertIn('ttt', keys)

    def test_value_of_key_from_double_letters(self):
        code = DOUBLE_LETTERS

        self.assertEqual(code['aa'], 'a')
        self.assertEqual(code['ee'], 'e')
        self.assertEqual(code['ii'], 'i')
        self.assertEqual(code['ooo'], 'o')
        self.assertEqual(code['uu'], 'u')
        self.assertEqual(code['ddd'], 'dd')
        self.assertEqual(code['ff'], 'f')
        self.assertEqual(code['hh'], 'h')
        self.assertEqual(code['zz'], 'z')
        self.assertEqual(code['rsrs'], 'rs')
        self.assertEqual(code['rsr'], 'rs')
        self.assertEqual(code['ll'], 'l')
        self.assertEqual(code['mm'], 'm')
        self.assertEqual(code['nn'], 'n')
        self.assertEqual(code['rrr'], 'rr')
        self.assertEqual(code['sss'], 'ss')
        self.assertEqual(code['ttt'], 't')

    def test_key_in_special_characters(self):
        keys = SPECIAL_CHARACTERS.keys()

        self.assertIn('\u00ba', keys)
        self.assertIn('\u00bb', keys)
        self.assertIn('\u00ac', keys)
        self.assertIn('\u2013', keys)
        self.assertIn('\u2026', keys)
        self.assertIn('\u2019', keys)
        self.assertIn('\u200e', keys)
        self.assertIn('\u200b', keys)
        self.assertIn('\u00b4', keys)
        self.assertIn('\u25bd', keys)
        self.assertIn('\u201c', keys)
        self.assertIn('\u201d', keys)
        self.assertIn('\u266a', keys)
        self.assertIn('\u2665', keys)
        self.assertIn('\u267a', keys)


    def test_key_in_similar_words(self):
        keys = SIMILAR_WORDS.keys()

        self.assertIn('axu', keys)
        self.assertIn('achu', keys)
        self.assertIn('axo', keys)
        self.assertIn('agr', keys)
        self.assertIn('aki', keys)
        self.assertIn('aqi', keys)
        self.assertIn('aq', keys)
        self.assertIn('akela', keys)
        self.assertIn('blz', keys)
        self.assertIn('ctz', keys)
        self.assertIn('cmg', keys)
        self.assertIn('gnt', keys)
        self.assertIn('dakele', keys)
        self.assertIn('daki', keys)
        self.assertIn('fikar', keys)
        self.assertIn('eh', keys)
        self.assertIn('fika', keys)
        self.assertIn('dps', keys)
        self.assertIn('hj', keys)
        self.assertIn('hje', keys)
        self.assertIn('jah', keys)
        self.assertIn('kd', keys)
        self.assertIn('ki', keys)
        self.assertIn('mt', keys)
        self.assertIn('soh', keys)
        self.assertIn('mto', keys)
        self.assertIn('msm', keys)
        self.assertIn('memo', keys)
        self.assertIn('mermo', keys)
        self.assertIn('neh', keys)
        self.assertIn('nois', keys)
        self.assertIn('okay', keys)
        self.assertIn('p', keys)
        self.assertIn('tah', keys)
        self.assertIn('pq', keys)
        self.assertIn('prq', keys)
        self.assertIn('pque', keys)
        self.assertIn('vamo', keys)
        self.assertIn('pqe', keys)
        self.assertIn('poko', keys)
        self.assertIn('qe', keys)
        self.assertIn('qm', keys)
        self.assertIn('qnto', keys)
        self.assertIn('tamo', keys)
        self.assertIn('tb', keys)
        self.assertIn('tbm', keys)
        self.assertIn('vc', keys)
        self.assertIn('vcs', keys)
        self.assertIn('v6', keys)


    def test_value_of_key_from_double_letters(self):
        code = SIMILAR_WORDS

        self.assertEqual(code['axu'], 'acho')
        self.assertEqual(code['achu'], 'acho')
        self.assertEqual(code['axo'], 'acho')
        self.assertEqual(code['agr'], 'agora')
        self.assertEqual(code['aki'], 'aqui')
        self.assertEqual(code['aqi'], 'aqui')
        self.assertEqual(code['aq'], 'aqui')
        self.assertEqual(code['akela'], 'aquela')
        self.assertEqual(code['blz'], 'beleza')
        self.assertEqual(code['ctz'], 'certeza')
        self.assertEqual(code['cmg'], 'comigo')
        self.assertEqual(code['gnt'], 'gente')
        self.assertEqual(code['dakele'], 'daquele')
        self.assertEqual(code['daki'], 'daqui')
        self.assertEqual(code['fikar'], 'ficar')
        self.assertEqual(code['eh'], 'e')
        self.assertEqual(code['fika'], 'ficar')
        self.assertEqual(code['dps'], 'depois')
        self.assertEqual(code['hj'], 'hoje')
        self.assertEqual(code['hje'], 'hoje')
        self.assertEqual(code['jah'], 'ja')
        self.assertEqual(code['kd'], 'cade')
        self.assertEqual(code['ki'], 'que')
        self.assertEqual(code['mt'], 'muito')
        self.assertEqual(code['soh'], 'so')
        self.assertEqual(code['mto'], 'muito')
        self.assertEqual(code['msm'], 'mesmo')
        self.assertEqual(code['memo'], 'mesmo')
        self.assertEqual(code['mermo'], 'mesmo')
        self.assertEqual(code['neh'], 'ne')
        self.assertEqual(code['nois'], 'nos')
        self.assertEqual(code['okay'], 'ok')
        self.assertEqual(code['p'], 'para')
        self.assertEqual(code['tah'], 'ta')
        self.assertEqual(code['pq'], 'porque')
        self.assertEqual(code['prq'], 'porque')
        self.assertEqual(code['pque'], 'porque')
        self.assertEqual(code['vamo'], 'vamos')
        self.assertEqual(code['pqe'], 'porque')
        self.assertEqual(code['poko'], 'pouco')
        self.assertEqual(code['qe'], 'que')
        self.assertEqual(code['qm'], 'quem')
        self.assertEqual(code['qnto'], 'quanto')
        self.assertEqual(code['tamo'], 'estamos')
        self.assertEqual(code['tb'], 'tambem')
        self.assertEqual(code['tbm'], 'tambem')
        self.assertEqual(code['vc'], 'voce')
        self.assertEqual(code['vcs'], 'voce')
        self.assertEqual(code['v6'], 'voce')

    def test_key_in_solitary_letters(self):

        self.assertIn('a', SOLITARY_LETTERS)
        self.assertIn('b', SOLITARY_LETTERS)
        self.assertIn('c', SOLITARY_LETTERS)
        self.assertIn('d', SOLITARY_LETTERS)
        self.assertIn('e', SOLITARY_LETTERS)
        self.assertIn('f', SOLITARY_LETTERS)
        self.assertIn('g', SOLITARY_LETTERS)
        self.assertIn('h', SOLITARY_LETTERS)
        self.assertIn('i', SOLITARY_LETTERS)
        self.assertIn('j', SOLITARY_LETTERS)
        self.assertIn('k', SOLITARY_LETTERS)
        self.assertIn('l', SOLITARY_LETTERS)
        self.assertIn('m', SOLITARY_LETTERS)
        self.assertIn('n', SOLITARY_LETTERS)
        self.assertIn('o', SOLITARY_LETTERS)
        self.assertIn('p', SOLITARY_LETTERS)
        self.assertIn('q', SOLITARY_LETTERS)
        self.assertIn('r', SOLITARY_LETTERS)
        self.assertIn('s', SOLITARY_LETTERS)
        self.assertIn('t', SOLITARY_LETTERS)
        self.assertIn('u', SOLITARY_LETTERS)
        self.assertIn('v', SOLITARY_LETTERS)
        self.assertIn('x', SOLITARY_LETTERS)
        self.assertIn('y', SOLITARY_LETTERS)
        self.assertIn('z', SOLITARY_LETTERS)
        self.assertIn('w', SOLITARY_LETTERS)
